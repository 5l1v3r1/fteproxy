Format-Transforming Encryption (FTE)
url: https://kpdyer.com/fte
github: https://github.com/redjack/FTE

QUICKSTART  
----------

We have the following six variables that define a typical FTE network configuration.  
  
CLIENT_IP - The IP address of the FTE client  
CLIENT_PORT - The TCP port the client will listen on  
SERVER_IP - The IP address of the FTE server  
SERVER_PORT - The TCP port the server will listen on  
PROXY_IP - The IP address of the socks proxy  
PROXY_PORT - The TCP port of the socks proxy  

PROXY_CLIENT <-> CLIENT_IP:CLIENT_PORT <-> ||NETWORK|| <-> SERVER_IP:SERVER_PORT <-> PROXY_IP:PROXY_PORT <-> ||INTERNET||

Typically we will have the FTE client and server running on different systems. However, for testing purposes it is acceptable for CLIENT_IP == SERVER_IP.

1. Extract the correct tar file for your arch:  
$ tar zxvf fte_relay-VERSION.PLATFORM.ARCH.tar.gz

2. Enter the extracted directory:  
$ cd fte_relay-VERSION.PLATFORM.ARCH

3. Start a SOCKS proxy on PROXY_IP:PROXY_PORT. We like: http://www.inet.no/dante/. For a quicker start, use "ssh -D PROXY_IP:PROXY_PORT user@localhost" on the server.

4. On the server, start the FTE relay:  
$ ./bin/fte_relay --mode server --server_ip SERVER_IP --server_port SERVER_PORT --proxy_ip PROXY_IP --proxy_port PROXY_PORT

5. On the client, start the FTE relay:  
$ ./bin/fte_relay --mode client --client_ip CLIENT_IP --client_port CLIENT_PORT --server_ip SERVER_IP --server_port SERVER_PORT

6. On the client, test that everything works:  
$ curl --socks5 CLIENT_IP:CLIENT_PORT google.com

FTE FORMATS
-----------------------------
See [1] for more information on FTE formats.

In order to change the format used by the FTE system, use the "--upstream-format" and "--downstream-format" command-line arguments when starting the client. For a list of available formats, invoke the "--help" argument.

EXAMPLE USAGES
-------------------------
Start the FTE client as a background process:  
$ ./bin/fte_relay --mode client --client_ip CLIENT_IP --client_port CLIENT_PORT  --server_ip SERVER_IP --server_port SERVER_PORT &

Request that the background FTE client process terminates cleanly:  
$ ./bin/fte_relay --mode client --stop

Start the FTE server as a background process:  
$ ./bin/fte_relay --mode server --server_ip SERVER_IP --client_port SERVER_PORT --proxy_ip PROXY_IP --proxy_port PROXY_PORT &

Request that the background FTE server process terminates cleanly:  
$ ./bin/fte_relay --mode server --stop

TOR BUNDLES
-----------
Tor browser bundles are available for 32- and 64-bit Linux, as well as Mac OSX.  These have been tested on the respective target system and are set to connect to our FTE-enabled bridge, located at the University of Wisconsin-Madison.  By default, the Tor bundles use the intersection-http language, but may be changed to use any of the above languages.  Based on our testing, the intersection-http language provides the best balance between overall speed and ability to circumvent just about all protocol identification systems.  

FTE-enabled TorBundles can be found at: https://kpdyer.com/fte

SECURITY CONSIDERATIONS
------------------------------------------------
The FTE software has several unit tests and the underlying encryption scheme has been checked for correctness and security.  In addition, the software has passed all stress tests and has been running constantly for over a month on one of our test systems.  There are, however, several features that have not been implemented yet:  

1. Authentication, to prevent man-in-the-middle attacks, relies on sharing cryptographic keys out-of-band. However, cryptographic keys are currently specified per-server. Hence, anyone that can connect to the server can intercept and recover the FTE-encapsulated datastream.
2. There has not been extensive testing again malicious inputs for buffer overflows or other memory corruption attacks.

While we believe this software is safe for most uses, please keep these issues in mind when applying the software in your particular environment.

REFERENCES
------------------------------------------------
[1] http://eprint.iacr.org/2012/494.pdf