#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of fteproxy.
#
# fteproxy is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# fteproxy is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with fteproxy.  If not, see <http://www.gnu.org/licenses/>.


import os
import time
import socket
import string
import random

import fte.conf
import fte.defs
import fte.network_io


BYTES_TO_SEND = 2 ** 18
TRIALS = 2 ** 6
BLOCK_SIZE = 2 ** 12
TIMEOUT = 60

BIND_IP = '127.0.0.1'
CLIENT_PORT = 8079
SERVER_PORT = 8080
PROXY_PORT = 8081


def main():
    """Start an fteproxy server.
    Iterate through the FTE formats available to fteproxy.
    For each format, spawn a client using that format, connect to the fteproxy server and pump data through the connection.
    Verify the data successfully traversed the client and server, upon success output performance statistics.
    """

    def_dir = os.path.join(fte.conf.getValue('general.defs_dir'))
    def_file = fte.conf.getValue('fte.defs.release') + '.json'
    def_abspath = os.path.normpath(os.path.join(def_dir, def_file))

    print 'Testing formats in', def_abspath

    start_server()

    languages = fte.defs.load_definitions().keys()
    for language in languages:
        if language.endswith('request'):
            language_name = language[:-8]
            elapsed, bytesSent = doTest(language_name)
            throughput = ((1.0 * bytesSent / elapsed) / (2 ** 20)) * \
                (2 ** 3)
            throughput = round(throughput, 2)
            upstream_regex = fte.defs.getRegex(language_name + '-request')
            downstream_regex = fte.defs.getRegex(language_name + '-response')

            print ' + SUCCESS, format_name="' + language_name + '"'
            print '    - client-server regex: "' + upstream_regex + '"'
            print '    - server-client regex: "' + downstream_regex + '"'
            print '    - test duration: ' + str(round(elapsed, 2)) + " seconds"
            print '    - goodput: ' + str(throughput) + 'Mbps'

    stop_server()

    print "****** ALL TESTS COMPLETE, SUCCESS!!"


def random_string(size):
    """Return a random alphanumeric string of length ``size``."""
    chars = string.ascii_uppercase + string.digits
    return ''.join(random.choice(chars) for x in range(size))


def doTest(language_name):
    """Given the ``language_name``, start the fteproxy client and pump
    ``BYTES_TO_SEND*TIRALS`` bytes via the fteproxy client and server.
    """
    
    elapsed = -1
    bytesSent = 0

    try:
        start_client(language_name)

        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind((BIND_IP, PROXY_PORT))
        sock.listen(100)

        new_stream = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        new_stream.connect((BIND_IP, CLIENT_PORT))

        conn, addr = sock.accept()

        startTimer = time.time()
        expected_msg = random_string(BYTES_TO_SEND)
        elapsed = -1
        for i in range(TRIALS):
            bytesSent += BYTES_TO_SEND
            actual_msg = ''
            expected_buffer = expected_msg
            while True:
                if expected_buffer:
                    bytessent = new_stream.send(expected_buffer[:BLOCK_SIZE])
                    expected_buffer = expected_buffer[bytessent:]
                else:
                    break
            while True:
                time.sleep(0.00001)
                [is_alive, data] = fte.network_io.recvall_from_socket(conn)
                actual_msg += data
                if (actual_msg == expected_msg):
                    break
                if elapsed > TIMEOUT or not is_alive:
                    raise Exception(
                        "!!!!!!!!!!! System tests failed to execute properly")
        elapsed = time.time() - startTimer

        fte.network_io.close_socket(conn)
        fte.network_io.close_socket(new_stream)
        fte.network_io.close_socket(sock)
    finally:
        stop_client()

    return elapsed, bytesSent


def start_client(language_name):
    """Start our fteproxy client, block until it's ready."""


    os.system("./bin/fteproxy --quiet --mode client"
              + " --upstream-format " + language_name + "-request"
              + " --downstream-format " + language_name + "-response"
              + " --client_ip " + BIND_IP
              + " --client_port " + str(CLIENT_PORT)
              + " --server_ip " + BIND_IP + " --server_port " + str(SERVER_PORT) + " &")

    waitForListener(BIND_IP, CLIENT_PORT)


def start_server():
    """Start our fteproxy server, block until it's ready."""

    os.system("./bin/fteproxy --quiet --mode server"
              + " --server_ip " + BIND_IP
              + " --server_port " + str(SERVER_PORT)
              + " --proxy_ip " + BIND_IP + "  --proxy_port " + str(PROXY_PORT) + " &")

    waitForListener(BIND_IP, SERVER_PORT)


def stop_client():
    """Stop our fteproxy client."""

    os.system("./bin/fteproxy --quiet --mode client --stop")

    time.sleep(1)


def stop_server():
    """Stop our fteproxy server."""

    os.system("./bin/fteproxy --quiet --mode server --stop")

    time.sleep(1)


class ListenerNotReady(Exception):
    pass


def waitForListener(ip, port, maxWait=60):
    """Block until a there's a process listening on ip:port.
    Return ``true`` on success, raise ``ListenerNotReady`` exception otherwise.
    """

    time.sleep(5)

    startTime = time.time()

    success = False
    new_stream = None
    while not success and (time.time() - startTime) < maxWait:
        time.sleep(0.1)
        try:
            new_stream = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            new_stream.settimeout(0.1)
            new_stream.connect((ip, port))
            success = True
        except:
            continue
        finally:
            if new_stream:
                new_stream.close()
                new_stream = None

    if not success:
        raise ListenerNotReady()

    time.sleep(1)

    return success


if __name__ == '__main__':
    main()
