#!/usr/bin/env python
# -*- coding: utf-8 -*-

# This file is part of FTE.
#
# FTE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# FTE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with FTE.  If not, see <http://www.gnu.org/licenses/>.

# TODO: Change test to not be dependent upon remote server

import os
import time
import socket

import fte.defs


BIND_IP = '127.0.0.1'


class ListenerNotListening(Exception):
    pass



def main():
    print 'System tests:'
    
    os.system("fteproxy --quiet --mode server" \
                    + " --server_ip " + BIND_IP + " --server_port 8080" \
                    + " --proxy_ip " + BIND_IP + "  --proxy_port 8081 &")
    
    waitForListener(BIND_IP, 8080)
    
    languages = fte.defs.load_definitions().keys()
    for language in languages:
        for i in range(10):
            if language.endswith('request'):
                format = language[:-8]
                elapsed, bytesSent = doTest(format)
                print '+', format, str(1.0*bytesSent/elapsed/(2**20)*(2**3))+'Mbps'
            
    os.system("fteproxy --quiet --mode server --stop")


def sanityCheck():
    assert which("fstminimize") is not None, ("openfst not properly installed")
    assert which("fstprint") is not None, ("openfst not properly installed")
    assert which("fstcompile") is not None, ("openfst not properly installed")
    assert which("fteproxy") is not None, ("fteproxy not properly installed, did you run 'sudo make install'?")
    assert which("socksproxy") is not None, ("socksproxy not properly installed, did you run 'sudo make install'?")


def doTest(format):
    elapsed = -1
    bytesSent = 0
    
    try:
        killall()
        sanityCheck()
        
        os.system("fteproxy --quiet --mode client" \
                        + " --upstream-format " + format + "-request" \
                        + " --downstream-format " + format + "-response" \
                        + " --client_ip " + BIND_IP + " --client_port 8079" \
                        + " --server_ip " + BIND_IP + " --server_port 8080 &")
        
        waitForListener(BIND_IP, 8079)
        
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        sock.bind((BIND_IP, 8081))
        sock.listen(10)
        
        new_stream = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        new_stream.connect((BIND_IP, 8079))
        
        conn, addr = sock.accept()
        
        bytesSent = 2 ** 16
        expected = id_generator(bytesSent)
        elapsed = -1
        success = True
        actual = ''
        startTimer = time.time()
        BLOCK_SIZE = 2 ** 12
        expectedbuf = expected
        while success:
            if expectedbuf:
                bytessent = new_stream.send(expectedbuf[:BLOCK_SIZE])
                expectedbuf = expectedbuf[bytessent:]
            elapsed = time.time() - startTimer
            [is_alive, data] = fte.io.recvall_from_socket(conn)
            actual += data
            if (actual == expected) or elapsed>30 or not is_alive:
                break
    finally:
        assert actual == expected, ((actual[:32], expected[:32]), (actual[-32:], expected[-32:]))
        killall()
    
    
    return elapsed, bytesSent


def killall():
    os.system("fteproxy --quiet --mode client --stop")


def filesAreEquivalent(fileA, fileB):
    with open(fileA) as fh:
        contentsFileA = fh.read()
    with open(fileB) as fh:
        contentsFileB = fh.read()
    assert contentsFileA != ''
    assert contentsFileB != ''
    return (contentsFileA == contentsFileB)


def which(program):
    def is_exe(fpath):
        isFile = os.path.isfile(fpath)
        isExecutable = os.access(fpath, os.X_OK)
        return isFile and isExecutable
    
    fpath, fname = os.path.split(program)
    if fpath:
        if is_exe(program):
            return program
    else:
        for path in os.environ["PATH"].split(os.pathsep):
            path = path.strip('"')
            exe_file = os.path.join(path, program)
            if is_exe(exe_file):
                return exe_file

    return None


def waitForListener(ip, port, maxWait=30):
    startTime = time.time()
    
    success = False
    new_stream = None
    while not success and (time.time()-startTime) < maxWait:
        try:
            new_stream = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            new_stream.settimeout(0.1)
            new_stream.connect((ip, port))
            success = True
        except:
            continue
        finally:
            if new_stream:
                new_stream.close()
                new_stream = None
            
    if not success:
        raise ListenerNotListening()
            
    time.sleep(1)
    
    return success


import string
import random
def id_generator(size, chars=string.ascii_uppercase + string.digits):
    return ''.join(random.choice(chars) for x in range(size))


if __name__ == '__main__':
    main()
