# This file is part of FTE.
#
# FTE is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# FTE is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with FTE.  If not, see <http://www.gnu.org/licenses/>.

#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import os
import signal
import glob
import asyncore
import argparse
import multiprocessing
sys.path.append(
    os.path.abspath(os.path.join(os.path.dirname(os.path.realpath(__file__)), '..')))
import fte.conf
import fte.logger
import fte.relay
import fte.encoder
import fte.encrypter
import fte.tcp.relay
fte_workers = []


class FTEWorker:

    def __init__(
        self,
        listener_ip,
        listener_port,
        forwarding_ip,
        forwarding_port,
        encrypter,
        encoder,
        decoder,
    ):
        self.listener_ip = listener_ip
        self.listener_port = listener_port
        self.forwarding_ip = forwarding_ip
        self.forwarding_port = forwarding_port
        self.encrypter = encrypter
        self.encoder = encoder
        self.decoder = decoder

    def stop(self):
        self.forwarder.stop()

    def run(self):
        self.forwarder = fte.relay.forwarder(
            self.listener_ip,
            self.listener_port,
            self.forwarding_ip,
            self.forwarding_port,
            self.encrypter,
            self.encoder,
            self.decoder,
            fte.conf.getValue('runtime.mode'),
        )
        log_level = fte.conf.getValue('loglevel.bin.fte_'
                                      + fte.conf.getValue('runtime.mode'))
        fte.logger.debug(log_level, 'FTE-READY')
        fte.logger.info(log_level, self.listener_ip + ':'
                        + str(self.listener_port) + ' -> '
                        + self.forwarding_ip + ':'
                        + str(self.forwarding_port))


class FTEMain(object):

    def run(self):
        print """FTE Copyright (C) 2012-2013 Kevin P. Dyer <kdyer@cs.pdx.edu>
    This program comes with ABSOLUTELY NO WARRANTY.
    This is free software, and you are welcome to redistribute it under certain conditions.
"""
        parser = argparse.ArgumentParser(prog='fte_(client|server)',
                                         formatter_class=argparse.ArgumentDefaultsHelpFormatter,
                                         description='Available formats: '
                                         + ' '.join(fte.conf.getValue('languages.regex')))
        parser.add_argument('--mode', required=True,
                            metavar='(client|server)',
                            help='Relay mode: client or server')
        parser.add_argument('--stop', action='store_true',
                            help='Shutdown daemon process')
        parser.add_argument('--debug', action='store_true',
                            help='Print information to the console')
        parser.add_argument('--perf-log', action='store_true',
                            help='Save performance information to log')
        parser.add_argument('--upstream-format',
                            help='Client-to-server language format',
                            default=fte.conf.getValue('runtime.state.upstream_language'
                                                      ))
        parser.add_argument('--downstream-format',
                            help='Server-to-client language format',
                            default=fte.conf.getValue('runtime.state.downstream_language'
                                                      ))
        parser.add_argument('--client_ip',
                            help='Client-side listening IP',
                            default=fte.conf.getValue('runtime.client.ip'
                                                      ))
        parser.add_argument('--client_port',
                            help='Client-side listening port',
                            default=fte.conf.getValue('runtime.client.port'
                                                      ))
        parser.add_argument('--server_ip',
                            help='Server-side listening IP',
                            default=fte.conf.getValue('runtime.server.ip'
                                                      ))
        parser.add_argument('--server_port',
                            help='Server-side listening port',
                            default=fte.conf.getValue('runtime.server.port'
                                                      ))
        parser.add_argument('--proxy_ip',
                            help='Forwarding-proxy (SOCKS) listening IP',
                            default=fte.conf.getValue('runtime.socks.ip'
                                                      ))
        parser.add_argument('--proxy_port',
                            help='Forwarding-proxy (SOCKS) listening port',
                            default=fte.conf.getValue('runtime.socks.port'
                                                      ))
        parser.add_argument('--key',
                            help='Cryptographic key, hex, must be exactly 64 characters',
                            default=fte.conf.getValue('runtime.fte.encrypter.key'
                                                      ))
        args = parser.parse_args(sys.argv[1:])
        if args.debug:
            print args
            fte.conf.setValue('runtime.console.debug', True)
        if args.perf_log:
            fte.conf.setValue('runtime.performance.debug', True)
        if args.stop:
            if not args.mode:
                print '--mode keyword is required with --stop'
                parser.print_help()
                sys.exit(1)
            if args.mode in ['client', 'server']:
                pid_files_path = \
                    os.path.join(fte.conf.getValue('general.pid_dir'),
                                 '.' + args.mode + '-*.pid')
                pid_files = glob.glob(pid_files_path)
                for pid_file in pid_files:
                    with open(pid_file) as f:
                        pid = int(f.read())
                        if fte.conf.getValue('runtime.console.debug'):
                            print 'Stopping pid=' + str(pid)
                        try:
                            os.kill(pid, signal.SIGKILL)
                        except OSError:
                            pass
                        os.unlink(pid_file)
                sys.exit(1)
        if args.mode == 'client':
            fte.conf.setValue('runtime.mode', 'client')
        elif args.mode == 'server':
            fte.conf.setValue('runtime.mode', 'server')
        else:
            parser.print_help()
            sys.exit(1)
        if args.client_ip:
            fte.conf.setValue('runtime.client.ip', args.client_ip)
        if args.client_port:
            fte.conf.setValue('runtime.client.port',
                              int(args.client_port))
        if args.server_ip:
            fte.conf.setValue('runtime.server.ip', args.server_ip)
        if args.server_port:
            fte.conf.setValue('runtime.server.port',
                              int(args.server_port))
        if args.proxy_ip:
            fte.conf.setValue('runtime.socks.ip', args.proxy_ip)
        if args.proxy_port:
            fte.conf.setValue('runtime.socks.port',
                              int(args.proxy_port))
        if args.downstream_format:
            fte.conf.setValue('runtime.state.downstream_language',
                              args.downstream_format)
        if args.upstream_format:
            fte.conf.setValue('runtime.state.upstream_language',
                              args.upstream_format)
        if args.key:
            if len(args.key) != 64:
                print 'Invalid key length: ' + str(len(args.key)) + ', should be 64'
                sys.exit(1)
            try:
                binary_key = args.key.decode('hex')
            except:
                print 'Invalid key format, must contain only 0-9a-fA-F'
                sys.exit(1)
            fte.conf.setValue('runtime.fte.encrypter.key', binary_key)
        if args.debug:
            print 'Controller process (pid=' + str(os.getpid()) + ')'
        pid_file = os.path.join(fte.conf.getValue('general.pid_dir'),
                                '.' + fte.conf.getValue('runtime.mode')
                                + '-' + str(os.getpid()) + '.pid')
        with open(pid_file, 'w') as f:
            f.write(str(os.getpid()))
        fte.conf.setValue('runtime.state.message_token', 'client')
        LOG_LEVEL = fte.conf.getValue('loglevel.bin.fte_'
                                      + fte.conf.getValue('runtime.mode'))
        if fte.conf.getValue('runtime.mode') == 'client':
            encoder_lang = \
                fte.conf.getValue('runtime.state.upstream_language')
            if encoder_lang in fte.conf.getValue('languages.regex'):
                encoder = fte.encoder.RegexEncoder(encoder_lang)
            elif encoder_lang in fte.conf.getValue('languages.cfg'):
                encoder = fte.encoder.CFGEncoder(encoder_lang)
            else:
                raise Exception('unknown language')
            decoder_lang = \
                fte.conf.getValue('runtime.state.downstream_language')
            if decoder_lang in fte.conf.getValue('languages.regex'):
                decoder = fte.encoder.RegexEncoder(decoder_lang)
            elif decoder_lang in fte.conf.getValue('languages.cfg'):
                decoder = fte.encoder.CFGEncoder(decoder_lang)
            else:
                raise Exception('unknown language')

            K1 = fte.conf.getValue('runtime.fte.encrypter.key')[:16]
            K2 = fte.conf.getValue('runtime.fte.encrypter.key')[16:32]
            encrypter = fte.encrypter.Encrypter(K1, K2)
            if fte.conf.getValue('runtime.http_proxy.enable'):
                remote_ip = fte.conf.getValue('runtime.http_proxy.ip')
                remote_port = \
                    fte.conf.getValue('runtime.http_proxy.port')
            else:
                remote_ip = fte.conf.getValue('runtime.server.ip')
                remote_port = fte.conf.getValue('runtime.server.port')
            if fte.conf.getValue('runtime.client.workers') == 1:
                fw = FTEWorker(
                    fte.conf.getValue('runtime.client.ip'),
                    fte.conf.getValue('runtime.client.port'),
                    remote_ip,
                    remote_port,
                    encrypter,
                    encoder,
                    decoder,
                )
                fw.run()
            else:
                worker_ports = []
                worker_port = \
                    fte.conf.getValue('runtime.client.worker_port')
                for i in \
                        range(fte.conf.getValue('runtime.client.workers')):
                    fw = FTEWorker(
                        fte.conf.getValue('runtime.client.ip'),
                        worker_port,
                        remote_ip,
                        remote_port,
                        encrypter,
                        encoder,
                        decoder,
                    )
                    fw.run()
                    worker_ports.append(worker_port)
                    worker_port += 1
                tw = \
                    fte.tcp.relay.forwarder(fte.conf.getValue('runtime.client.ip'
                                                              ), fte.conf.getValue(
                                            'runtime.client.port'),
                                            fte.conf.getValue(
                                                'runtime.client.ip'),
                                            worker_ports)
                asyncore.loop()
        elif fte.conf.getValue('runtime.mode') == 'server':
            K1 = fte.conf.getValue('runtime.fte.encrypter.key')[:16]
            K2 = fte.conf.getValue('runtime.fte.encrypter.key')[16:32]
            encrypter = fte.encrypter.Encrypter(K1, K2)
            if fte.conf.getValue('runtime.server.workers') == 1:
                fw = FTEWorker(
                    fte.conf.getValue('runtime.server.ip'),
                    fte.conf.getValue('runtime.server.port'),
                    fte.conf.getValue('runtime.socks.ip'),
                    fte.conf.getValue('runtime.socks.port'),
                    encrypter,
                    None,
                    None,
                )
                fw.run()
            else:
                worker_ports = []
                worker_port = \
                    fte.conf.getValue('runtime.server.worker_port')
                for i in \
                        range(fte.conf.getValue('runtime.server.workers')):
                    fw = FTEWorker(
                        fte.conf.getValue('runtime.server.ip'),
                        worker_port,
                        fte.conf.getValue('runtime.socks.ip'),
                        fte.conf.getValue('runtime.socks.port'),
                        encrypter,
                        None,
                        None,
                    )
                    fw.run()
                    worker_ports.append(worker_port)
                    worker_port += 1
                tw = \
                    fte.tcp.relay.forwarder(fte.conf.getValue('runtime.server.ip'
                                                              ), fte.conf.getValue(
                                            'runtime.server.port'),
                                            fte.conf.getValue(
                                                'runtime.server.ip'),
                                            worker_ports)
                asyncore.loop()
        fte.logger.info(LOG_LEVEL, 'FTE Forwarder ('
                        + fte.conf.getValue('runtime.mode') + ') Ready')


if __name__ == '__main__':
    try:
        main = FTEMain()
        main.run()
    except KeyboardInterrupt:
        pass
    finally:
        if fte.conf.getValue('runtime.mode'):
            pid_file = os.path.join(fte.conf.getValue('general.pid_dir'
                                                      ), '.'
                                    + fte.conf.getValue('runtime.mode')
                                    + '-' + str(os.getpid()) + '.pid')
            if pid_file and os.path.exists(pid_file):
                os.unlink(pid_file)
                if fte.conf.getValue('runtime.console.debug'):
                    print fte.conf.getValue('runtime.mode'), \
                        'Controller (pid=' + str(os.getpid()) \
                        + ') shut down cleanly'
